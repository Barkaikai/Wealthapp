# backend/app/data_sync.py (augment or replace as needed)
import sqlite3
from typing import Dict, Any, List

from crypto_bindings import get_crypto_portfolio_placeholder  # new import

DB_PATH = "data.db"

def ensure_schema():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("""
    CREATE TABLE IF NOT EXISTS assets (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        source TEXT,
        asset TEXT,
        amount REAL,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    )
    """)
    c.execute("""
    CREATE TABLE IF NOT EXISTS events (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        type TEXT,
        details TEXT,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    )
    """)
    conn.commit()
    conn.close()

def upsert_asset(source: str, asset: str, amount: float):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("""
    INSERT INTO assets (source, asset, amount)
    VALUES (?, ?, ?)
    """, (source, asset, amount))
    conn.commit()
    conn.close()

def get_assets_summary() -> Dict[str, Any]:
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT source, asset, amount, timestamp FROM assets ORDER BY timestamp DESC LIMIT 100")
    rows = c.fetchall()
    conn.close()
    summary = {"total_by_asset": {}}
    for r in rows:
        source, asset, amount, ts = r
        summary["total_by_asset"][asset] = summary["total_by_asset"].get(asset, 0) + amount
    return summary

def merge_crypto_into_assets():
    crypto = get_crypto_portfolio_placeholder()
    for asset, value in crypto.get("total_by_asset", {}).items():
        upsert_asset("public_crypto", asset, float(value))

def main():
    ensure_schema()
    # Seed mock data or fetch live
    upsert_asset("mock_source", "Stocks", 125000)
    upsert_asset("mock_source", "Bonds", 30000)
    merge_crypto_into_assets()
    print("Assets summary:", get_assets_summary())

if __name__ == "__main__":
    main()
