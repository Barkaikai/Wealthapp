Wealth Forge Frontend — React Ui (wealth Forge App
· typescript
      <div className="w-full bg-gray-200 rounded-full h-3 overflow-hidden">
                <div className="flex flex-col gap-2">
                  <div className="flex items-center justify-between p-2 border rounded">
                    <div><div className="font-medium">Starter Pack</div><div className="text-xs text-gray-500">10 WFG</div></div>
                    <button onClick={()=>buyPack(10)} className="px-3 py-1 rounded bg-gradient-to-r from-yellow-400 to-green-500 text-white text-sm">Buy</button>
                  </div>
                  <div className="flex items-center justify-between p-2 border rounded">
                    <div><div className="font-medium">Pro Pack</div><div className="text-xs text-gray-500">25 WFG</div></div>
                    <button onClick={()=>buyPack(25)} className="px-3 py-1 rounded bg-gradient-to-r from-yellow-400 to-green-500 text-white text-sm">Buy</button>
                  </div>
                </div>
              </div>
            </div>


          </section>


          <aside>
            <div className="bg-white rounded-2xl p-4 shadow-md mb-4">
              <h3 className="font-semibold">Leaderboard</h3>
              <ol className="text-sm mt-2 space-y-2">
                {leaderboard.length ? leaderboard.slice(0,6).map((p,i)=> (
                  <li key={p.wallet} className="flex justify-between"><div>{i+1}. {p.nickname || (p.wallet.slice(0,6)+".."+p.wallet.slice(-4))}</div><div className="font-semibold">{p.tokens}</div></li>
                )) : (<li className="text-xs text-gray-500">No data. Complete modules to appear here.</li>)}
              </ol>
              <div className="mt-3 text-xs text-gray-400">Share your profile to climb the ranks.</div>
            </div>


            <div className="bg-white rounded-2xl p-4 shadow-md">
              <h3 className="font-semibold">Vault</h3>
              <div className="text-sm mt-2">Tokens: <span className="font-bold">{tokens}</span></div>
              <button onClick={fetchVault} className="mt-3 px-3 py-2 rounded bg-white border w-full">View Vault</button>
            </div>
          </aside>
        </main>


        <footer className="mt-8 text-center text-sm text-gray-500">WealthForge — build habits, earn tokens, and unlock assets.</footer>
      </div>


      {showMiniGame && <MiniGame onComplete={handleMiniComplete} onClose={()=>setShowMiniGame(false)} />}


      {shopOpen && (
        <div className="fixed inset-0 flex items-center justify-center z-40 bg-black/40">
          <div className="w-[480px] bg-white rounded-2xl p-6">
            <div className="flex justify-between items-center mb-4"><h3 className="font-semibold">Vault / Redeem</h3><button onClick={()=>setShopOpen(false)}>✕</button></div>
            <div className="space-y-3">
              {(vaultItems.length ? vaultItems : [{id:'tmpl1', name:'Starter Budget Template', cost:10}]).map(it=> (
                <div key={it.id} className="flex items-center justify-between border p-3 rounded">
                  <div>
                    <div className="font-medium">{it.name}</div>
                    <div className="text-xs text-gray-500">Cost: {it.cost} WFG</div>
                  </div>
                  <div>
                    <button onClick={()=>redeem(it.id,it.cost)} className="px-3 py-1 rounded bg-gradient-to-r from-yellow-400 to-green-500 text-white">Redeem</button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}


      {onboardOpen && (
        <div className="fixed inset-0 flex items-center justify-center bg-black/40 z-50">
          <div className="w-[720px] bg-white rounded-2xl p-8">
            <div className="flex justify-between items-start"><h2 className="text-2xl font-bold">Welcome to WealthForge</h2><button onClick={()=>{setOnboardOpen(false); storage.set('wf_onboard_shown', true);}}>Close</button></div>
            <div className="mt-4 text-gray-700">
              WealthForge is a gamified learning platform. Earn WFG tokens by completing modules, playing mini-games, keeping daily streaks, and redeem tokens for real learning assets. Use tokens to build your financial habits and unlock premium templates.
            </div>
            <div className="mt-6 grid grid-cols-3 gap-3">
              <div className="p-3 bg-gray-50 rounded">Mine — play minigames to earn</div>
              <div className="p-3 bg-gray-50 rounded">Learn — short, actionable modules</div>
              <div className="p-3 bg-gray-50 rounded">Redeem — templates & mentor time</div>
            </div>
            <div className="mt-6 text-right"><button onClick={()=>{setOnboardOpen(false); storage.set('wf_onboard_shown', true);}} className="px-4 py-2 rounded bg-gradient-to-r from-yellow-400 to-green-500 text-white">Get Started</button></div>
          </div>
        </div>
      )}


    </div>
  );
}



Done — I created a single-file React component (WealthForge UI) in the canvas named “WealthForge Frontend — React UI (WealthForgeApp.jsx)”.

What's inside (quick summary):

Full React component (default export) using Tailwind, framer-motion, and react-confetti.

Implements: Connect Wallet (Phantom), Mine (mini-game drag & quiz), Progress bar (XP/Level), Daily streak handling, Shop/Buy packs (simulated payment), Leaderboard fetch, Vault & Redeem UI, Onboarding modal, Learning modules, and confetti animations.

All interactions call placeholder backend endpoints (/api/mine, /api/leaderboard, /api/vault/:wallet, /api/redeem) — backend must implement these routes (I already provided a backend scaffold earlier in this conversation).

Next steps and how to run:

Copy the component into a React app (I recommend Vite or Create React App). Ensure Tailwind is configured.

Install dependencies: npm install react-confetti framer-motion (and other deps like @solana/web3.js if you wire wallet payments).

Set env variables in .env:

REACT_APP_API_BASE (e.g. http://localhost:4000)

REACT_APP_OWNER_SOL (optional display)

Wire up the backend endpoints I provided earlier (or tell me to scaffold the full repo) so minting, leaderboard, vault, and redemption are properly validated & minted server-side.

If you want, I can now: