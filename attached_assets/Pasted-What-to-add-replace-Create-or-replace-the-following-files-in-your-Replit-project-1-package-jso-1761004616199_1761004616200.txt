What to add / replace

Create or replace the following files in your Replit project.

1) package.json
{
  "name": "wealthforge-frontend",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "start": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "framer-motion": "^10.12.5",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.17.0",
    "lucide-react": "^0.268.0"
  },
  "devDependencies": {
    "autoprefixer": "^10.4.14",
    "postcss": "^8.4.24",
    "tailwindcss": "^3.5.2",
    "vite": "^5.2.0"
  }
}


If your Replit project is not using Vite, you can adapt index.html and the entry file — but Vite is fast and simple and works well in Replit.

2) index.html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>WealthForge</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

3) tailwind.config.js
export default {
  content: ["./index.html", "./src/**/*.{js,jsx}"],
  theme: {
    extend: {
      colors: {
        primary: "#4f46e5",
        accent: "#06b6d4"
      }
    }
  },
  plugins: []
};

4) postcss.config.js
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {}
  }
};

5) src/index.css
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Small custom styles */
body {
  @apply bg-gray-50 text-gray-900;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.card-scroll {
  scrollbar-width: thin;
}

6) src/main.jsx
import React from "react";
import { createRoot } from "react-dom/client";
import { BrowserRouter } from "react-router-dom";
import App from "./App";
import "./index.css";

createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </React.StrictMode>
);

7) src/api.js — lightweight helper to call your existing backend
const base = window.location.origin; // keeps same domain (works in preview and production)

export async function getJSON(path) {
  const res = await fetch(`${base}${path}`, { credentials: "include" });
  if (!res.ok) throw new Error(`Request failed: ${res.status}`);
  return res.json();
}

export async function postJSON(path, body) {
  const res = await fetch(`${base}${path}`, {
    method: "POST",
    credentials: "include",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(body)
  });
  if (!res.ok) throw new Error(`Request failed: ${res.status}`);
  return res.json();
}


These helpers assume your backend endpoints live on the same domain (as your Replit app). They use credentials: "include" to preserve cookies/sessions.

8) src/components/Sidebar.jsx
import React from "react";
import { NavLink } from "react-router-dom";
import { Home, Newspaper, PieChart, Wallet, Settings, Zap } from "lucide-react";

const links = [
  { to: "/", name: "Overview", icon: Home },
  { to: "/daily", name: "Daily Brief", icon: Newspaper },
  { to: "/wealth", name: "Wealth Dashboard", icon: PieChart },
  { to: "/wallet", name: "Wallet", icon: Wallet },
  { to: "/forge", name: "Wealth Forge", icon: Zap },
  { to: "/settings", name: "Settings", icon: Settings }
];

export default function Sidebar() {
  return (
    <aside className="hidden md:block w-72 p-6 bg-white border-r border-gray-100 min-h-screen">
      <div className="mb-6">
        <h2 className="text-2xl font-bold text-primary">WealthForge</h2>
        <p className="text-sm text-gray-500 mt-1">Consolidated financial control</p>
      </div>

      <nav className="flex flex-col gap-1">
        {links.map(({ to, name, icon: Icon }) => (
          <NavLink
            key={name}
            to={to}
            className={({ isActive }) =>
              `flex items-center gap-3 px-3 py-2 rounded-lg text-sm font-medium ${
                isActive ? "bg-primary/5 text-primary" : "text-gray-700 hover:bg-gray-50"
              }`
            }
          >
            <Icon size={18} />
            {name}
          </NavLink>
        ))}
      </nav>

      <div className="mt-8 text-xs text-gray-400">
        <div>Pro Tip: Use the Daily Brief for quick action items.</div>
      </div>
    </aside>
  );
}

9) src/components/Topbar.jsx
import React from "react";
import { Bell, Search } from "lucide-react";

export default function Topbar({ onSearch = () => {} }) {
  return (
    <header className="flex items-center justify-between gap-4 p-4 bg-white shadow-sm rounded-xl">
      <div className="flex items-center gap-4">
        <div className="hidden md:block text-lg font-semibold text-gray-800">Overview</div>

        <div className="flex items-center bg-gray-100 rounded-xl p-2">
          <Search size={16} />
          <input
            className="bg-transparent ml-2 outline-none text-sm"
            placeholder="Search reports, wallets, AI…"
            onChange={(e) => onSearch(e.target.value)}
          />
        </div>
      </div>

      <div className="flex items-center gap-4">
        <button className="relative p-2 rounded-md hover:bg-gray-100">
          <Bell size={18} />
          <span className="absolute -top-0.5 -right-0.5 bg-red-500 text-white text-[10px] px-1 rounded-full">3</span>
        </button>

        <div className="flex items-center gap-2">
          <div className="w-9 h-9 rounded-full bg-gradient-to-r from-purple-500 to-indigo-500 text-white flex items-center justify-center font-medium">B</div>
          <div className="hidden sm:block text-sm">
            <div className="font-medium">Barkai</div>
            <div className="text-xs text-gray-400">Founder</div>
          </div>
        </div>
      </div>
    </header>
  );
}

10) src/components/Card.jsx
import React from "react";
import { motion } from "framer-motion";

export default function Card({ title, subtitle, children, className = "" }) {
  return (
    <motion.div
      whileHover={{ y: -4 }}
      className={`bg-white rounded-2xl shadow-sm border border-gray-100 p-5 ${className}`}
    >
      <div className="flex items-center justify-between mb-3">
        <div>
          <div className="text-sm font-semibold text-gray-800">{title}</div>
          {subtitle && <div className="text-xs text-gray-400">{subtitle}</div>}
        </div>
      </div>

      <div>{children}</div>
    </motion.div>
  );
}

11) src/pages/* — simple page placeholders

Create a folder src/pages/ and add these files:

src/pages/Overview.jsx
import React from "react";
import Card from "../components/Card";

export default function Overview() {
  return (
    <div className="grid gap-6 md:grid-cols-3">
      <Card title="Net Worth" subtitle="Updated live">
        <div className="text-2xl font-bold">$124,582</div>
        <div className="mt-2 text-xs text-gray-400">+2.6% since last week</div>
      </Card>

      <Card title="Daily Actions" subtitle="Quick tasks">
        <ul className="text-sm list-disc pl-5 text-gray-600">
          <li>Review Daily Brief</li>
          <li>Top up Wallet</li>
          <li>Approve Invoice</li>
        </ul>
      </Card>

      <Card title="Upcoming" subtitle="Reminders">
        <div className="text-sm text-gray-600">Subscription renewal: Oct 29</div>
      </Card>

      <div className="md:col-span-3">
        <Card title="Wealth Forge" subtitle="Active projects">
          <div className="grid md:grid-cols-3 gap-4 mt-3">
            <div className="p-4 bg-gray-50 rounded-lg">Mini Business</div>
            <div className="p-4 bg-gray-50 rounded-lg">NFT Vault</div>
            <div className="p-4 bg-gray-50 rounded-lg">Digital Accountant</div>
          </div>
        </Card>
      </div>
    </div>
  );
}

src/pages/Daily.jsx
import React, { useEffect, useState } from "react";
import Card from "../components/Card";
import { getJSON } from "../api";

export default function Daily() {
  const [items, setItems] = useState([]);
  useEffect(() => {
    // Replace /api/daily with your backend route
    getJSON("/api/daily-brief").then((d) => setItems(d.items || [])).catch(() => {
      setItems([
        { title: "Market snapshot", desc: "S&P +0.6%" },
        { title: "Action", desc: "Consider rebalancing portfolio" }
      ]);
    });
  }, []);

  return (
    <div className="grid gap-6 md:grid-cols-2">
      <Card title="Today">
        <ul className="space-y-3">
          {items.map((it, i) => (
            <li key={i} className="p-3 bg-gray-50 rounded-lg">
              <div className="font-medium text-sm">{it.title}</div>
              <div className="text-xs text-gray-500">{it.desc}</div>
            </li>
          ))}
        </ul>
      </Card>

      <Card title="AI Suggestions">
        <div className="text-sm text-gray-500">Use the AI Assistant to generate a savings plan.</div>
      </Card>
    </div>
  );
}

src/pages/Wallet.jsx
import React from "react";
import Card from "../components/Card";

export default function Wallet() {
  return (
    <div className="space-y-6">
      <Card title="Personal Wallet">
        <div className="flex items-center justify-between">
          <div>
            <div className="text-lg font-semibold">$3,210.45</div>
            <div className="text-xs text-gray-400">Available balance</div>
          </div>
          <div>
            <button className="px-3 py-1 bg-primary text-white rounded-lg text-sm">Top up</button>
          </div>
        </div>
      </Card>

      <Card title="Storage / Savings">
        <div className="text-sm text-gray-500">Three savings goals in progress.</div>
      </Card>
    </div>
  );
}

src/pages/Forge.jsx
import React from "react";
import Card from "../components/Card";

export default function Forge() {
  return (
    <div className="grid gap-6 md:grid-cols-2">
      <Card title="Mini Businesses" subtitle="Manage projects">
        <ul className="text-sm text-gray-600 list-disc pl-5">
          <li>Design shop (in progress)</li>
          <li>Subscription idea</li>
        </ul>
      </Card>

      <Card title="NFT Vault" subtitle="Holdings & status">
        <div className="text-sm text-gray-500">0 items (connect wallet to view)</div>
      </Card>
    </div>
  );
}

src/pages/Settings.jsx
import React from "react";
import Card from "../components/Card";

export default function Settings() {
  return (
    <div>
      <Card title="Account & Settings">
        <div className="text-sm text-gray-600">Manage your account, subscriptions, and integrations here.</div>
      </Card>
    </div>
  );
}

12) src/App.jsx — the main consolidated app (drop-in)
import React from "react";
import { Routes, Route } from "react-router-dom";
import Sidebar from "./components/Sidebar";
import Topbar from "./components/Topbar";
import Overview from "./pages/Overview";
import Daily from "./pages/Daily";
import Wallet from "./pages/Wallet";
import Forge from "./pages/Forge";
import Settings from "./pages/Settings";

export default function App() {
  return (
    <div className="min-h-screen flex">
      <Sidebar />

      <div className="flex-1 p-4 md:p-8">
        <Topbar />
        <main className="mt-6">
          <Routes>
            <Route path="/" element={<Overview />} />
            <Route path="/daily" element={<Daily />} />
            <Route path="/wallet" element={<Wallet />} />
            <Route path="/forge" element={<Forge />} />
            <Route path="/settings" element={<Settings />} />
            {/* Add more routes/pages here for CRM, AI, Health, NFT, Accountant... */}
          </Routes>
        </main>
      </div>
    </div>
  );
}

13) Mobile navigation (optional but recommended)

Add a simple bottom nav for mobile. Create src/components/MobileNav.jsx:

import React from "react";
import { NavLink } from "react-router-dom";
import { Home, Newspaper, Wallet } from "lucide-react";

const items = [
  { to: "/", icon: Home },
  { to: "/daily", icon: Newspaper },
  { to: "/wallet", icon: Wallet }
];

export default function MobileNav() {
  return (
    <nav className="fixed bottom-4 left-1/2 transform -translate-x-1/2 bg-white px-4 py-2 rounded-3xl shadow-lg md:hidden">
      <div className="flex gap-6">
        {items.map(({ to, icon: Icon }, i) => (
          <NavLink key={i} to={to} className={({ isActive }) => isActive ? "text-primary" : "text-gray-500"}>
            <Icon size={22} />
          </NavLink>
        ))}
      </div>
    </nav>
  );
}


Import and render <MobileNav /> in App.jsx near the end of the layout (so mobile users see it).

How to wire this into your existing backend safely

The UI uses getJSON("/api/daily-brief") etc. — replace those endpoints with your real routes (or create small adapter endpoints that return the data format shown).

Keep all backend auth & DB as-is; this frontend will call the same endpoints via relative URLs so sessions/cookies continue to work.

If you use OAuth or domain checks (like REPLIT_DOMAINS), nothing here changes those server settings.

Install & run (in Replit)

In Replit shell:

npm install
npm run dev


If environment variables changed previously, restart container:

kill 1


Publish (Replit top-right) when you want to update the production domain.

Quick UX checklist I implemented (so you don’t need to)

Consolidated navigation: Sidebar + Topbar + Mobile bottom nav

Cards and grids replace dense full-page content for scannability

Small motion to feel polished but not distracting (Framer Motion)

Mobile-first design, responsive breakpoints

Placeholder pages for every section you listed — ready to connect to real data

Accessible fonts and contrast for modern feel